[modification]
    id=Rav_XP_Mod_Beta
    name=_"XP Mod (Beta)"
    description=_"Experiment where damage and strike upgrades are automatically distributed and upgrade amount is 10% of base value instead of constant. Distribution aims to reach 3.5 damage per strike. May be enabled together with regular XP Mod, but disable strike and damage upgrades there then or amounts can be unexpected. Drain and amla-only logic is not implemented yet.

When unit has multiple attacks with same name, upgrade takes lowest values from all of them. So 40-1 and 4-10 with same name are 4-1 for upgrade purpose.

Attacks that are not from unit type might get upgraded, but not tested.

version 2.4.1 by Ravana"
    require_modification=no
    type=hybrid
    [options]
        [slider]
            id=Rav_XP_damage_cost_beta
            default=16
            min=12
            max=28
            step=2
            name=_"DMG cost"
            description=_"XP required to upgrade total power"
        [/slider]
    [/options]

    [event]
        name=preload
        first_time_only=no
        [lua]
            code=<<
local T = wml.tag

-- damage / strikes
local goal_rate = 3.5

function wesnoth.wml_actions.xp_mod_damage(cfg)
	local event_context = wesnoth.current.event_context
	local unit = wesnoth.get_unit(event_context.x1, event_context.y1)

	wesnoth.play_sound("fanfare-short.wav")

	-- optimization: treat attack name as id. If one unit has multiple attacks with same name, treat them as single attack - use lowest strikes and lowest damage out of them

	-- name -> {base_damage, base_strikes}
	local unit_attacks = {}

	local function record_attacks(array)
		for _, attack in ipairs(array) do
			if unit_attacks[attack.name] then
				print("known attack", attack.name)
				local result = unit_attacks[attack.name]
				result[1] = math.min(attack.damage, result[1])
				result[2] = math.min(attack.number, result[2])
			else
				print("new attack", attack.name)
				unit_attacks[attack.name] = { attack.damage, attack.number }
			end
		end
	end

	-- read default attacks from unit type
	local base_attacks = wesnoth.unit_types[unit.type].attacks
	record_attacks(base_attacks)

	-- read non-default attacks from effect new_attack
	local extra_attacks = {}
	for _, o in ipairs(wml.child_array(wml.get_child(unit.__cfg, "modifications"), "object")) do
		for _, e in ipairs(wml.child_array(o, "effect")) do
			if e.apply_to == "new_attack" then
				print("extra attack", e.name)
				table.insert(extra_attacks, e)
			end
		end
	end
	record_attacks(extra_attacks)


	-- incement power modifier in unit variables
	local power_percent = unit.variables.Rav_XP_power_percent or 0
	power_percent = power_percent + cfg.power_percent
	unit.variables.Rav_XP_power_percent = power_percent

	-- remove from unit modifications its previous xp mod object
	unit:remove_modifications {
		Rav_XP_Mod = true
	}
	-- add to unit modifications new xp mod object with separate increases for each attack
	local object = {
		Rav_XP_Mod = true,
		take_only_once = false
	}
	local desc = ""
	-- for each attack insert effect
	for attack_name, data in pairs(unit_attacks) do
		local base_damage = data[1]
		local base_strikes = data[2]
		local base_power = base_damage * base_strikes

		local goal_power = base_damage * base_strikes * (1 + power_percent / 100)
		local rate = base_damage / base_strikes
		print("Goal: ", goal_power)

		local good_enough = false
		local proposed_damage = base_damage
		local proposed_strikes = base_strikes
		local proposed_rate = rate

		local break_loop = false
		while not break_loop do
			break_loop = true
			-- if making any change, set break_loop to false

			local if_damage = (proposed_damage + 1) * (proposed_strikes)
			print("if damage: ", (proposed_damage + 1), "-", (proposed_strikes), "=", if_damage)
			local if_damage_rate = (proposed_damage + 1) / (proposed_strikes)
			local can_damage = false
			if if_damage <= math.ceil(goal_power) then
				can_damage = true
			end
			local if_strikes = (proposed_damage) * (proposed_strikes + 1)
			print("if strikes: ", (proposed_damage), "-", (proposed_strikes + 1), "=", if_strikes)
			local if_strikes_rate = (proposed_damage) / (proposed_strikes + 1)
			local can_strikes = false
			if if_strikes <= math.ceil(goal_power) then
				can_strikes = true
			end

			print("damage rate", if_damage_rate, "strike rate", if_strikes_rate)
			if can_damage and can_strikes then
				if math.abs(if_damage_rate - goal_rate) <= math.abs(if_strikes_rate - goal_rate) then
					print("pick damage")
					proposed_damage = proposed_damage + 1
					break_loop = false
				else
					print("pick strike")
					proposed_strikes = proposed_strikes + 1
					break_loop = false
				end
			else
				if can_damage then
					print("pick_damage")
					proposed_damage = proposed_damage + 1
					break_loop = false
				else
					if can_strikes then
						print("pick_strike")
						proposed_strikes = proposed_strikes + 1
						break_loop = false
					end
				end
			end
		end
		table.insert(object, T.effect {
			apply_to = "attack",
			name = attack_name,
			increase_damage = proposed_damage - base_damage,
			increase_attacks = proposed_strikes - base_strikes
		})
		desc = desc .. " | " .. attack_name .. " (+" .. tostring(proposed_damage - base_damage) .. ", +" .. tostring(proposed_strikes - base_strikes) .. ")"
	end
	desc = desc .. " | Power modifer: +" .. tostring(power_percent) .. "%"

	unit:add_modification("object", object)

	unit.experience = unit.experience - cfg.cost

	local speaker = string.format("%s the %s", tostring(unit.name), tostring(wesnoth.unit_types[unit.type].name))
	local message = string.format("I spent %s xp and now have %s!", cfg.cost, tostring(desc))
	wesnoth.message(speaker, message)

	--local floating_message = string.format("<span color='#BCB088'>%s</span>", tostring(desc))
	--wesnoth.float_label(unit.x, unit.y, floating_message)
end

>>
        [/lua]
    [/event]

    [event]
        name=turn 1
        #{VARIABLE Rav_XP_damage_cost_beta 0} # testing
        {VARIABLE Rav_XP_damage_percent 10}

		[set_menu_item]
			id=xp_mod_exp_power
			description=_ "+$Rav_XP_damage_percent|% base damage: $Rav_XP_damage_cost_beta xp"
			[show_if]
				[have_unit]
					x,y=$x1,$y1
					side=$side_number
					formula="experience >= $Rav_XP_damage_cost_beta"
				[/have_unit]
			[/show_if]
			[command]
				[xp_mod_damage]
					cost = $Rav_XP_damage_cost_beta
					power_percent = $Rav_XP_damage_percent
				[/xp_mod_damage]
			[/command]
		[/set_menu_item]
        [lua]
            code = <<
			local settings = ""
			settings = settings .. "Power cost: " .. wesnoth.get_variable "Rav_XP_damage_cost_beta" .. " | "
			if settings == "" then else
				wesnoth.message("XP Mod version 2.4.1 (beta)", settings) 
			end
			>>
        [/lua]
		# todo cant clear Rav_XP_damage_cost_beta Rav_XP_damage_percent
        #{CLEAR_VARIABLE Rav_XP_damage_cost_beta,Rav_XP_damage_percent}
    [/event]
[/modification]
